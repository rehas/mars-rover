TaskList For Mars Rover
-----------------------

- Map out the goals
	+	Describe flow and assumptions
	- Create sub-steps
		
		- Figure out test cases
			- Try commanding a rover out of the grid
			- Try commanding a rover to crash into another one
			- Try sending jumbled commands
	- Describe separate parts and responsibilities
		- A remote sattelite that is responsible for:
			- Receiving the batch commands
			- Parsing and validating commands
			- Communicating the commands to the rovers down on the surface
			- Receiving the results of the commands
			- Communicating results back to the sender
		- A rover that is responsible for:
			- Executing the given commands
			- Evaluating if the command is executable
				- By checking grid edges
				- By checking if there are other rovers on the way
				- Sending the execution results back to the sattelite
		- Grid 
			- Holding updated information about the locations of the rovers and the edges
		- A comms decoder to display the recieved updates on the grid
-----

- FLOW:
	- We want to send rovers to mars and we want to communicate our movement orders to the rovers
		- We will send our commands in files containing 
			- Grid Size info -> 5 6 -> 5 width 6 length : Sent 1 per command batch
			- CommandsPerRover
				- Initial position of the rover on the grid -> 1 2 N : Rover is on location (x,y) 1,2 and facing North
					- This information is verified by another department so we will assume it is correct
					- (0,0) means the cell at top left corner
					- (3,4) means 4th row, 3rd column (with 0 based index)
				- Action commands -> LML -> turn Left - Move - turn Left 
					- Move means move 1 square on the grid towards the direction currently faced. 
					- Left / Right means -> counter clockwise and clockwise respectively when you're looking at the compass.
		- In return we want:
			- The updated status of the grid
			- Whether or not our commands got executed as is
				- If not, a response with a reason
		- We want our rovers to be aware of:
			- The edges on the grid
				- To prevent falling over the edge even if the command recieved directs
			- The other rovers on the grid
				- To prevent crashing other rovers on the same grid (even if the command recieved directs)

- ASSUMPTIONS:
	- We assume that our rovers operate far from the polar areas
		- Hence the grids are flat
		- So parallel moving rovers don't crash into each other
	- We assume that with each batch of commands there is only 1 command per rover
	- The order of the commands are executed in sequence 
		- If there's a possibility of of crash or fall over
			- That specific command does not get executed and will be skipped (with a response)
	- We assume that every batch of commands is independent from the previous or future commands
		- That the state of the grid between batches are independent
			- That there could be more or less rovers
			- The locations of the rovers could be different than previous batch
	- We assume that the rovers cover 1 square size on grid completely filling it

-----

- Phase1
	- Build the grid
		+ Grid class
		+ init with sizes
		+ display self 
		- update with new locations of rovers on
		+ is desired location available
	- Build the satellite_link
		+ receive commands from file
		- decide if command receiving should happen upon init or later
			- it should happen after init, as a send_commands
		+ parse commands
		+ initalize grid (empty)
		+ place rovers on grid
		+ send rovers messages to move
		- get end result of grid
		- send back the result
	- Build the rover
		+ initialize with location
		+ send commands
		+ set print method to display on grid
		+ Parse movement commands
		+ Caluclate next position
		+ If available
			+ Update position for rover
	- Validate commandfile
	- Return result as file
	+ Test cases
		+ Unit tests for functions
		+ Validation cases
	+ Run both from vscode and cli
		+ Set paths


-----
- PreDelivery Checks
	- ReadMe contains steps to install
	- Try install from scratch and run
		- MacOs
		- Windows